import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

species= pd.read_csv('species_info.csv')

print(species)

species_count= species.scientific_name.nunique()
print(species_count)

species_type= species.category.unique()

conservation_statuses= species.conservation_status.unique()

conservation_counts= species.groupby('conservation_status').scientific_name.nunique().reset_index()

print(conservation_counts)

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed=species.groupby('conservation_status').scientific_name.nunique().reset_index()

_____________________________________________________________________________________________________________________
import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

species= pd.read_csv('species_info.csv')

print(species)

species_count= species.scientific_name.nunique()
print(species_count)

species_type= species.category.unique()

conservation_statuses= species.conservation_status.unique()

conservation_counts= species.groupby('conservation_status').scientific_name.nunique().reset_index()

print(conservation_counts)

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed=species.groupby('conservation_status').scientific_name.nunique().reset_index()
___________________________________________________________________________________________________________
import codecademylib
from matplotlib import pyplot as plt
import pandas as pd

species= pd.read_csv('species_info.csv')

print(species)

species_count= species.scientific_name.nunique()
print(species_count)

species_type= species.category.unique()

conservation_statuses= species.conservation_status.unique()

conservation_counts= species.groupby('conservation_status').scientific_name.nunique().reset_index()

print(conservation_counts)

species.fillna('No Intervention', inplace = True)

conservation_counts_fixed=species.groupby('conservation_status').scientific_name.nunique().reset_index()
__________________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)

protection_counts = species.groupby('conservation_status')\
    .scientific_name.nunique().reset_index()\
    .sort_values(by='scientific_name')

print(protection_counts)

plt.figure(figsize=(10,4))

ax= plt.subplot()
x= [0,1,2,3,4]
y= [4, 10, 15, 151, 5363]

plt.bar(x,y)
ax.set_xticks([0, 1, 2, 3, 4])

ax.set_xticklabels(['In Recovery', 'Threatened', 'Endangered', 'Species of Concern', 'No Intervention'], rotation=30)

plt.ylabel('Number of Species')
plt.title('Conservation Status by Species')
plt.show()
___________________________________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)
deffunction= lambda x: True \
	if x != 'No Intervention' \
	else False 

species['is_protected']= species.conservation_status.apply(deffunction)
print(species)

category_counts= species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()
print(category_counts.head())

category_pivot= category_counts.pivot(columns='is_protected',index='category',values='scientific_name').reset_index()
print(category_pivot)

category_pivot.columns= ['category', 'not_protected', 'protected']

category_pivot['percent_protected']= (category_pivot.protected/(category_pivot.protected + category_pivot.not_protected))

print(category_pivot)
_______________________________________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)
deffunction= lambda x: True \
	if x != 'No Intervention' \
	else False 

species['is_protected']= species.conservation_status.apply(deffunction)
print(species)

category_counts= species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()
print(category_counts.head())

category_pivot= category_counts.pivot(columns='is_protected',index='category',values='scientific_name').reset_index()
print(category_pivot)

category_pivot.columns= ['category', 'not_protected', 'protected']

category_pivot['percent_protected']= (category_pivot.protected/(category_pivot.protected + category_pivot.not_protected))

print(category_pivot)
_____________________________________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

# Loading the Data
species = pd.read_csv('species_info.csv')

# print species.head()

# Inspecting the DataFrame
species_count = len(species)

species_type = species.category.unique()

conservation_statuses = species.conservation_status.unique()

# Analyze Species Conservation Status
conservation_counts = species.groupby('conservation_status').scientific_name.count().reset_index()

# print conservation_counts

# Analyze Species Conservation Status II
species.fillna('No Intervention', inplace = True)

conservation_counts_fixed = species.groupby('conservation_status').scientific_name.count().reset_index()

# Plotting Conservation Status by Species
protection_counts = species.groupby('conservation_status')\
    .scientific_name.count().reset_index()\
    .sort_values(by='scientific_name')
    
# plt.figure(figsize=(10, 4))
# ax = plt.subplot()
# plt.bar(range(len(protection_counts)),
#        protection_counts.scientific_name.values)
# ax.set_xticks(range(len(protection_counts)))
# ax.set_xticklabels(protection_counts.conservation_status.values)
# plt.ylabel('Number of Species')
# plt.title('Conservation Status by Species')
# labels = [e.get_text() for e in ax.get_xticklabels()]
# print ax.get_title()
# plt.show()

species['is_protected'] = species.conservation_status != 'No Intervention'

category_counts = species.groupby(['category', 'is_protected'])\
                         .scientific_name.count().reset_index()
  
# print category_counts.head()

category_pivot = category_counts.pivot(columns='is_protected', index='category', values='scientific_name').reset_index()

category_pivot.columns = ['category', 'not_protected', 'protected']

category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)

print category_pivot.head()
from scipy.stats import chi2_contingency

contingency= [[30, 146],
              [75, 413]]

chi2, pval, dof, expected = chi2_contingency(contingency)
print pval

contin= [[30, 146],
         [5, 73]]

chi2, pval, dof, expected = chi2_contingency(contin)
print pval

cont= [[11, 115],
       [30, 146]]
chi2, pval, dof, expected = chi2_contingency(cont)
print pval


pval_reptile_mammal=0.0383555902297
_________________________________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations= pd.read_csv('observations.csv')
print (observations)

deffunction= lambda x: True \
	if 'Sheep' in x \
	else False

species['is_sheep']= species.common_names.apply(deffunction)

species_is_sheep=[species.is_sheep == True]
print (species_is_sheep)

sheep_species =species[(species.is_sheep== True) & (species.category=='Mammal')]
print (sheep_species)

sheep_observations= pd.merge(sheep_species, observations, how='outer')

print sheep_observations.head()

obs_by_park= sheep_observations.groupby('park_name').observations.sum().reset_index()

print(obs_by_park)
___________________________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations= pd.read_csv('observations.csv')
print (observations)

deffunction= lambda x: True \
	if 'Sheep' in x \
	else False

species['is_sheep']= species.common_names.apply(deffunction)

species_is_sheep=[species.is_sheep == True]
print (species_is_sheep)

sheep_species =species[(species.is_sheep== True) & (species.category=='Mammal')]
print (sheep_species)

sheep_observations= pd.merge(sheep_species, observations, how='outer')

print sheep_observations.head()

obs_by_park= sheep_observations.groupby('park_name').observations.sum().reset_index()

print(obs_by_park)
________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species['is_sheep'] = species.common_names.apply(lambda x: 'Sheep' in x)
sheep_species = species[(species.is_sheep) & (species.category == 'Mammal')]

observations = pd.read_csv('observations.csv')

sheep_observations = observations.merge(sheep_species)

obs_by_park = sheep_observations.groupby('park_name').observations.sum().reset_index()

print(obs_by_park)
xvals= [0,1,2,3]
yvals= [250, 149, 507, 282]
parks= ['Bryce National Park', 'Great Smoky Mountains National Park', 'Yellowstone National Park', 'Yosemite National Park']

plt.figure(figsize=(16,4))
ax =  plt.subplot()
plt.bar(xvals,yvals)
ax.set_xticks(range(len(xvals)))
ax.set_xticklabels(parks)
plt.ylabel('Number of Observations')
plt.title('Observations of Sheep per Week')
plt.show()
__________________________________________________________________________________________________
baseline= 15
minimum_detectable_effect= 33
sample_size_per_variant= 890
yellowstone_weeks_observing= 1.75
bryce_weeks_observing= 3.56
____________________________________________________________________________________________________
